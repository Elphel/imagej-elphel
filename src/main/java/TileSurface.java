/**
 **
 ** TileSurface - hadle tile surfaces
 **
 ** Copyright (C) 2017 Elphel, Inc.
 **
 ** -----------------------------------------------------------------------------**
 **  
 **  TileSurface.java is free software: you can redistribute it and/or modify
 **  it under the terms of the GNU General Public License as published by
 **  the Free Software Foundation, either version 3 of the License, or
 **  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
 **
 **  You should have received a copy of the GNU General Public License
 **  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ** -----------------------------------------------------------------------------**
 **
 */

public class TileSurface {
//	public 
		private int tileSize;
		private int stSize;
		private int tilesX;
		private int tilesY;
		private int [] st_dirs8;
		
//		private int nsTilesstSize =   0; // 8;
		GeometryCorrection   geometryCorrection = null;
		public TileSurface(
				int tileSize,
				int stSize,
				int tilesX,
				int tilesY,
				GeometryCorrection geometryCorrection){
			this.tileSize = tileSize;
			this.stSize = stSize;
			this.geometryCorrection =geometryCorrection;
			this.tilesX =  tilesX;
			this.tilesY =  tilesY;
			int [] dirs =  {-tilesX, -tilesX + 1, 1, tilesX + 1, tilesX, tilesX - 1, -1, -tilesX - 1};
			this.st_dirs8 = dirs;
		}

		public class TileData{
			double disparity;
			double strength;
			double enable;
			int [] neighbors = null;
		}
		/**
		 * Get tile surface number from supertile number, direction (-1 same) and the supertile plane index
		 * @param nsTile number of the supertile
		 * @param dir direction -1 - same supertile, 0 - N (up), 1 - NE, .. 7 - NW
		 * @param np number of the supertile plane
		 * @param planes array of the per-supertile, per plane plane data (each level can be null)
		 * @return unique tile plane index
		 */
		public int getTileSurfaceNumber (
				int nsTile,
				int dir,              // direction, or -1 (same)
				int np,
				TilePlanes.PlaneData [][] planes
				){
			if ((planes[nsTile] == null) || (planes[nsTile][np] == null)){
				return -1; // empty supertile or supertile plane
			}
			if (dir < 0) {
				return np;
			}
			int tsn = planes[nsTile].length;
			for (int d = 0; d < dir; d ++){
				int nsTile1 = nsTile + st_dirs8[d];
				if (planes[nsTile1] != null){
					tsn += planes[nsTile1].length;
				}
			}
			return tsn + np; 
		}
		/**
		 * Get supertile direction and the plane number that contributeted to a specific tile surface 
		 * @param nsTile supertile index
		 * @param tp tile surface index (generated by getTileSurfaceNumber)
		 * @param planes array of the per-supertile, per plane plane data (each level can be null)
		 * @return a pair of {dir, plane index}. dir is -1 for the plane in the same supertile, 0..7 for neighbors
		 */
		
		public int []  getSuperTileDirPlane (
				int nsTile,
				int tp,
				TilePlanes.PlaneData [][] planes
				)
		{
			int num_planes = (planes[nsTile] == null)? 0: planes[nsTile].length;
			int [] rslt = {-1, tp};
			if (tp < num_planes) return rslt;
			tp -= num_planes;
			for (int d = 0; d < st_dirs8.length; d ++){
				int nsTile1 = nsTile + st_dirs8[d];
				num_planes = (planes[nsTile1] == null)? 0: planes[nsTile1].length;
				if (tp < num_planes){
					rslt[0] = d;
					rslt[1] = tp;
					return rslt;
				}
				tp -= num_planes; 
			}
			return null; // error - invalid input
		}

		
}
